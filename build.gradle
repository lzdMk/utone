plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// Meteor Maven repositories for Baritone fork
	maven {
		name = "meteor-maven-releases"
		url = uri("https://maven.meteordev.org/releases")
	}
	maven {
		name = "meteor-maven-snapshots"
		url = uri("https://maven.meteordev.org/snapshots")
	}
	maven {
		name = "spongepowered"
		url = uri("https://repo.spongepowered.org/repository/maven-public/")
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"utone" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
			
		}
	}

	// Ensure a stable refmap name for mixin annotation processing (helps IDEs)
	mixin {
		defaultRefmapName = 'utone.refmap.json'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Meteor Development Baritone fork
	modCompileOnly("meteordevelopment:baritone:${baritone_version}-SNAPSHOT")

	// Enable mixin annotation processing for IDEs (VS Code/Red Hat Java)
	annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}